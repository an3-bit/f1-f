trigger:
  branches:
    include:
      - develop
      - master
      - main
  paths:
    include:
      - "*"

pr:
  branches:
    include:
      - master
      - develop
    exclude:
      - develop/*
  paths:
    include:
      - "*"

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: SolarHotWater

jobs:
  - job: FullPipeline
    displayName: "AI Solar Hot Water CI/CD Pipeline"
    steps:
      - checkout: self
        displayName: "Checkout Code"

      - script: |
          docker build -t $(BACKEND_DOCKER_IMAGE) ./
        displayName: "Build Server Image"

      - script: |
          echo "$(DOCKERHUB_PASSWORD)" | docker login -u "$(DOCKERHUB_USERNAME)" --password-stdin
          docker push "$(BACKEND_DOCKER_IMAGE)"
        displayName: "Push Docker Images to Docker Hub"
        condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/master'))

      - task: SSH@0
        inputs:
          sshEndpoint: "AI-Solar-Hot-Water"
          runOptions: "commands"
          commands: |
            #!/bin/bash

             # Suppress STDERR messages and handle exit codes
            OUTPUT_MESSAGE=$(sudo docker-compose -f /root/snap/docker/common/project/frontend/compose.yaml pull 2>&1 || true)
            echo "$OUTPUT_MESSAGE"
            OUTPUT_MESSAGE=$(sudo docker-compose -f /root/snap/docker/common/project/frontend/compose.yaml down --remove-orphans 2>&1 || true)
            echo "$OUTPUT_MESSAGE"
            OUTPUT_MESSAGE=$(sudo docker-compose -f /root/snap/docker/common/project/frontend/compose.yaml up --force-recreate -d 2>&1 || true)
            echo "$OUTPUT_MESSAGE"
            OUTPUT_MESSAGE=$(sudo docker system prune -af 2>&1 || true)
            echo "$OUTPUT_MESSAGE"
            # Verify containers are running
            sudo docker ps
        displayName: "Deploy to DigitalOcean"
        condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/master'))
